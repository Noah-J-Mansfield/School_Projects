// Returns 1 on success,
// -1 on invalid HTTP request,
// -2 on I/O error,
// -3 on malloc failure
int parseHttp(FILE *in, http_request_t **request) 
{
  
    http_request_t *req = NULL;
    int rc = -1;
    char line[LINE_LENGTH]; //used to read from file

   
    // TODO: Allocate memory for req
    if((req = malloc(ARRAY_LENGTH_BYTES)) == NULL){ //allocate memory for the struct
        rc = -3;
        goto cleanup;
    }

    //making sure the starting values are correct
    //memset(req, 0, sizeof(http_header_t));
    req -> verb = NULL; 
    req -> path = NULL;
    req -> version = NULL;
    req -> num_headers = 0;
    
    char *e = fgets(line,LINE_LENGTH,in); //read first line

    char *memory = NULL; //used for allocating memory

    // TODO: Read HTTP request from <in>
    if(e == NULL){ //if null
    
        rc = -2;
        goto cleanup;
    }
    

     if(line[strlen(line)-1] != '\n')
    {
        //printf("ERROR STRING TO LONG");
        rc = -1;
        goto cleanup;
    }
    if(strcmp(line, "\r\n") == 0)
    {
        rc = -2;
        goto cleanup;
    }

    char *saveptr = NULL;
    char *re;
    re = strtok_r(line, " ", &saveptr); //parse the string, I could not get strtok_r to work
    if(re == NULL || strcmp(line, "\r\n")){
        if(strcmp("GET",re) == 0) //check verb
        {
            //malloc space for verb string
            memory = malloc(10);
            strlcpy(memory, re, 10);
            req->verb = memory;
        }
        else
        {
            rc = -4;
            goto cleanup;
        }
        
        re = strtok_r(NULL, " ", &saveptr); //parse again, assumptiion that the first line contains 3 arguments
        if(re[0] == '/')// check vailid path (WEAK CHECK)
        {
            memory = malloc(30);
            strlcpy(memory, re, 30);
            req->path = memory;
        }else
        {
            rc = -5;
            goto cleanup;
        }


        re = strtok_r(NULL, " ", &saveptr);
        
        if(strcmp("HTTP/1.0\r\n", re ) == 0) //check the version number
        {
            memory = malloc(10);
            strlcpy(memory, re, 10);
            req->version = memory;
            
        }else
        {
            rc = -6;
            goto cleanup;
        }
        
        
        e = fgets(line, LINE_LENGTH, in); //get next line
        
        if(strcmp(e, "\r\n")==0) //if line is empty
        {
            goto skip_headers;
        }

        
        saveptr = NULL;
        size_t n = 0;
        while((getline(&saveptr, &n, in)) != -1){} //ingnore all headers
        free(saveptr);
    
    }
    skip_headers: //if no headers were present


    // TODO: On success, return req
   
    *request = req;
    rc = 1;
   
    return rc;

cleanup:
    //free all memory in req
    free(req->verb);
    free(req->path);
    free(req->version);
    free(req);  // It's OK to free() a NULL pointer 
    return rc;

}
